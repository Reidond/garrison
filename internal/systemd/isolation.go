package systemd

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"

	execu "github.com/example/garrison/internal/executil"
)

// Paths describes per-server directories used by the systemd user service.
type Paths struct {
	Base     string
	App      string
	Profiles string
	Config   string
	Logs     string
	Cache    string
	UnitDir  string
	Unit     string
}

// GetPaths returns resolved XDG-based paths for the given server key.
func GetPaths(serverKey string) (Paths, error) { return computePaths(serverKey) }

func computePaths(serverKey string) (Paths, error) {
	home, err := os.UserHomeDir()
	if err != nil {
		return Paths{}, err
	}
	dataHome := firstNonEmpty(os.Getenv("XDG_DATA_HOME"), filepath.Join(home, ".local", "share"))
	cacheHome := firstNonEmpty(os.Getenv("XDG_CACHE_HOME"), filepath.Join(home, ".cache"))
	stateHome := firstNonEmpty(os.Getenv("XDG_STATE_HOME"), filepath.Join(home, ".local", "state"))
	configHome := firstNonEmpty(os.Getenv("XDG_CONFIG_HOME"), filepath.Join(home, ".config"))

	base := filepath.Join(dataHome, "garrison", serverKey)
	unitName := serviceName(serverKey)
	p := Paths{
		Base:     base,
		App:      filepath.Join(base, "app"),
		Profiles: filepath.Join(base, "profiles"),
		Config:   filepath.Join(base, "profiles", "config.json"),
		Logs:     filepath.Join(stateHome, "garrison", serverKey),
		Cache:    filepath.Join(cacheHome, "garrison", "steamcmd"),
		UnitDir:  filepath.Join(configHome, "systemd", "user"),
		Unit:     filepath.Join(configHome, "systemd", "user", unitName),
	}
	return p, nil
}

func firstNonEmpty(values ...string) string {
	for _, v := range values {
		if strings.TrimSpace(v) != "" {
			return v
		}
	}
	return ""
}

func RunSteamcmdTransient(serverKey, appID string, validate bool) error {
	p, err := computePaths(serverKey)
	if err != nil {
		return err
	}
	validateFlag := ""
	if validate {
		validateFlag = " validate"
	}
	args := []string{
		"systemd-run", "--user", "--collect", "--wait", "--unit=garrison-scmd-" + serverKey,
		"-p", "WorkingDirectory=" + p.Base,
		"-p", "UMask=0077",
		"-p", "NoNewPrivileges=yes",
		"-p", "PrivateTmp=yes",
		"-p", "PrivateDevices=yes",
		"-p", "ProtectSystem=strict",
		"-p", "ProtectKernelTunables=yes",
		"-p", "ProtectKernelModules=yes",
		"-p", "ProtectControlGroups=yes",
		"-p", "RestrictAddressFamilies=AF_INET,AF_INET6,AF_UNIX",
		"-p", "RestrictNamespaces=yes",
		"-p", "RestrictRealtime=yes",
		"-p", "LockPersonality=yes",
		"-p", "CapabilityBoundingSet=",
		"-p", "ReadWritePaths=" + p.Base,
		"-p", "ReadWritePaths=" + p.Cache,
		"-p", "ReadWritePaths=" + p.Logs,
		"/usr/bin/bash", "-lc",
		fmt.Sprintf("mkdir -p '%s' '%s' '%s' '%s'; export HOME=%s PATH=$PATH; ${GARRISON_STEAMCMD_BIN:-steamcmd} +force_install_dir %s +login anonymous +app_update %s%s +quit",
			p.Base, p.Profiles, p.Cache, p.Logs, p.Cache, p.App, appID, validateFlag),
	}
	return execu.Default.Run(args[0], args[1:]...)
}

func InstallAndStartUnit(serverKey string, execStartPre []string, execStart string) error {
	p, err := computePaths(serverKey)
	if err != nil {
		return err
	}
	if err := os.MkdirAll(p.UnitDir, 0o755); err != nil {
		return err
	}
	unitContent := buildUnit(execStartPre, execStart, p)
	tmpFile, err := ioutil.TempFile("", "garrison-arma-reforger-*.service")
	if err != nil {
		return err
	}
	tmpPath := tmpFile.Name()
	if _, err := tmpFile.WriteString(unitContent); err != nil {
		_ = tmpFile.Close()
		_ = os.Remove(tmpPath)
		return err
	}
	_ = tmpFile.Close()
	if err := os.Rename(tmpPath, p.Unit); err != nil {
		_ = os.Remove(tmpPath)
		return fmt.Errorf("install unit: %w", err)
	}
	if err := execu.Default.Run("systemctl", "--user", "daemon-reload"); err != nil {
		return err
	}
	unit := serviceName(serverKey)
	_ = execu.Default.Run("systemctl", "--user", "enable", unit)
	if err := execu.Default.Run("systemctl", "--user", "start", unit); err != nil {
		return err
	}
	fmt.Printf("Started via systemd --user: %s\n", unit)
	return nil
}

func Stop(serverKey string) error {
	unit := serviceName(serverKey)
	if err := execu.Default.Run("systemctl", "--user", "stop", unit); err != nil {
		return err
	}
	fmt.Println("Arma Reforger server stopped (systemd --user)")
	return nil
}

func Status(serverKey string) error {
	unit := serviceName(serverKey)
	out, err := execu.Default.CombinedOutput("systemctl", "--user", "is-active", unit)
	state := strings.TrimSpace(out)
	if err == nil && state == "active" {
		fmt.Println("running (systemd --user)")
		return nil
	}
	if state == "inactive" || state == "failed" || state == "deactivating" || state == "activating" {
		fmt.Println(state)
		return nil
	}
	_ = execu.Default.Run("systemctl", "--user", "status", "--no-pager", unit)
	return nil
}

func buildUnit(execStartPre []string, execStart string, p Paths) string {
	pre := ""
	if len(execStartPre) > 0 {
		for _, line := range execStartPre {
			pre += "ExecStartPre=/usr/bin/bash -lc '" + line + "'\n"
		}
	}
	unit := `# Automatically generated by garrison
[Unit]
Description=Garrison - Game Server (isolated, user)
Wants=default.target
After=default.target

[Service]
Type=simple
WorkingDirectory=` + p.Base + `
Environment=HOME=` + p.Cache + `
Environment=PATH=/usr/games:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
UMask=0077

NoNewPrivileges=yes
PrivateTmp=yes
PrivateDevices=yes
ProtectSystem=strict
ProtectKernelTunables=yes
ProtectKernelModules=yes
ProtectControlGroups=yes
RestrictAddressFamilies=AF_INET AF_INET6 AF_UNIX
RestrictNamespaces=yes
RestrictRealtime=yes
LockPersonality=yes
CapabilityBoundingSet=
ReadWritePaths=` + p.Base + `
ReadWritePaths=` + p.Cache + `
ReadWritePaths=` + p.Logs + `

` + pre + `ExecStart=` + execStart + `
Restart=on-failure

[Install]
WantedBy=default.target
`
	return unit
}

//

// DeleteAll stops and removes the user unit and deletes all user data/cache/logs for this server.
func DeleteAll(serverKey string) error {
	// Best-effort stop and disable unit
	unit := serviceName(serverKey)
	_ = execu.Default.Run("systemctl", "--user", "stop", unit)
	_ = execu.Default.Run("systemctl", "--user", "disable", unit)
	p, err := computePaths(serverKey)
	if err != nil {
		return err
	}
	// Remove unit file
	_ = os.Remove(p.Unit)
	_ = execu.Default.Run("systemctl", "--user", "daemon-reload")
	// Remove data dirs
	_ = os.RemoveAll(p.Base)
	_ = os.RemoveAll(p.Cache)
	_ = os.RemoveAll(p.Logs)
	return nil
}

func serviceName(serverKey string) string { return "garrison-" + serverKey + ".service" }
